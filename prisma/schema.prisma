generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Branch {
  COMPUTER_SCIENCE
  ELECTRICAL
  MECHANICAL
  CIVIL
  CHEMICAL
}

model Assignment {
  id          String  @id @default(uuid()) // Ensure it's a string
  title       String
  subject     String
  description String?
  year        Int
  branch      Branch
  sem         Int
  fileUrl     String?
  adminId     String // Change to String if necessary
  admin       Admin   @relation(fields: [adminId], references: [id])
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
}

model SuperAdmin {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String
  admins   Admin[]
}

model Admin {
  id                String       @id @default(uuid())
  name              String
  email             String       @unique
  password          String
  branch            Branch
  canAddAssignments Boolean      @default(false)
  assignments       Assignment[]
  SuperAdmin        SuperAdmin?  @relation(fields: [superAdminId], references: [id])
  superAdminId      String?
}

model User {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  password     String
  branch       Branch
  year         Int
  semester     Int
  enr_no       String    @unique
  role         Role      @default(USER)
  leaves       Leave[]
  otp          String? 
  otpExpiresAt DateTime? 

  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt()
  Assignment Assignment[]
}

model Leave {
  id            String      @id @default(uuid())
  userId        String
  applicantName String
  reason        String
  leaveDate     DateTime
  startDate     DateTime
  endDate       DateTime
  noOfDays      Int
  leaveReason   String
  status        LeaveStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt()

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
