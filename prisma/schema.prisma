generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Branch {
  COMPUTER_SCIENCE
  ELECTRICAL
  MECHANICAL
  CIVIL
  CHEMICAL
}

model Assignment {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  subject     String
  description String?
  year        Int
  branch      Branch
  sem         Int
  fileUrl     String?
  adminId     String
  admin       Admin   @relation(fields: [adminId], references: [id])
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
}

model SuperAdmin {
  id       String  @id @default(uuid()) @map("_id")
  name     String
  email    String  @unique
  password String
  admins   Admin[]
}

model Admin {
  id                String       @id @default(uuid()) @map("_id")
  name              String
  email             String       @unique
  password          String
  role              Role         @default(ADMIN)
  branch            Branch
  canAddAssignments Boolean      @default(false)
  assignments       Assignment[]
  SuperAdmin        SuperAdmin?  @relation(fields: [superAdminId], references: [id])
  superAdminId      String?
}

model User {
  id         String       @id @default(uuid()) @map("_id")
  name       String
  email      String       @unique
  password   String
  branch     Branch
  year       Int
  semester   Int
  enr_no     String       @unique
  role       Role         @default(USER)
  leaves     Leave[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?    @updatedAt()
  Assignment Assignment[]
}

model StudyMaterial {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subject   String
  chapter   String
  year      Int
  branch    String
  semester  Int
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leave {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    String
  startDate DateTime
  endDate   DateTime
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OTP {
  id        String   @id @default(uuid()) @map("_id")
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([email])
}
